<?php

/**
 * @package Nekofar\Nobitex
 *
 * @author Milad Nekofar <milad@nekofar.com>
 */

declare(strict_types=1);

namespace Nekofar\Nobitex\Auth;

use Http\Client\HttpClient;
use Http\Discovery\HttpClientDiscovery;
use Http\Discovery\MessageFactoryDiscovery;
use Http\Discovery\StreamFactoryDiscovery;
use Http\Message\Authentication;
use Http\Message\RequestFactory;
use Http\Message\StreamFactory;
use Nekofar\Nobitex\Config;
use Psr\Http\Message\RequestInterface;

/**
 * Class Basic
 */
class Basic implements Authentication
{
    /**
     * @var string
     */
    private $apiUrl;

    /**
     * @var string
     */
    private $username;

    /**
     * @var string
     */
    private $password;

    /**
     * @var string
     */
    private $remember;

    /**
     * @var string
     */
    private $accessToken;

    /**
     * @var \Http\Client\HttpClient
     */
    private $httpClient;

    /**
     * @var \Http\Message\RequestFactory
     */
    private $requestFactory;

    /**
     * @var \Http\Message\StreamFactory
     */
    private $streamFactory;

    /**
     * @var integer|null
     */
    private $totpToken;

    /**
     * Basic constructor.
     *
     * @param string $username Username for authentication.
     * @param string $password Password for authentication.
     * @param boolean $remember Long term token generation.
     * @param integer $totpToken TOTP token generated by Authenticator apps.
     * @param \Http\Client\HttpClient $httpClient Required HTTP Client for retrieve token.
     * @param \Http\Message\RequestFactory $requestFactory
     * @param \Http\Message\StreamFactory $streamFactory
     */
    public function __construct(
        $username,
        $password,
        $remember = true,
        $totpToken = null,
        HttpClient $httpClient = null,
        RequestFactory $requestFactory = null,
        StreamFactory $streamFactory = null
    ) {
        $this->apiUrl = Config::DEFAULT_API_URL;

        $this->username = $username;
        $this->password = $password;
        $this->remember = $remember;

        $this->totpToken = $totpToken;

        $this->httpClient = $httpClient ?: HttpClientDiscovery::find();
        $this->requestFactory = $requestFactory ?: MessageFactoryDiscovery::find(); // phpcs:ignore
        $this->streamFactory = $streamFactory ?: StreamFactoryDiscovery::find();
    }

    /**
     * Refresh authentication access token.
     *
     * @return boolean|string
     *
     * @throws \Http\Client\Exception
     */
    public function refreshToken()
    {
        $this->accessToken = $this->retrieveAuthToken();

        return $this->accessToken;
    }

    /**
     * Authenticates a request.
     */
    private function retrieveAuthToken()
    {
        $response = $this->httpClient
            ->sendRequest(
                $this->createAuthRequest()
            );

        if ($response->getStatusCode() === 200) {
            return json_decode((string)$response->getBody())->key;
        }

        return null;
    }

    /**
     */
    private function createAuthRequest(): RequestInterface
    {
        $request = $this->requestFactory
            ->createRequest(
                'POST',
                $this->apiUrl . '/auth/login/',
                [
                    'Content-Type' => 'application/json',
                    'X-TOTP' => $this->totpToken ?: null,
                ],
                json_encode([
                    'username' => $this->username,
                    'password' => $this->password,
                    'remember' => $this->remember === true ? 'yes' : 'no',
                    'captcha'  => 'api',
                ])
            );

        return $request;
    }

    /**
     * Authenticates a request.
     *
     * @param \Psr\Http\Message\RequestInterface $request
     *
     */
    public function authenticate(RequestInterface $request): RequestInterface
    {
        if ($this->accessToken !== null) {
            return $request->withHeader(
                'Authorization',
                sprintf('Token %s', $this->accessToken)
            );
        }

        return $request;
    }
}
